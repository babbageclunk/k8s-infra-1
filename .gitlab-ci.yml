stages:
  - Dependencies
  - Bootstrap

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  # - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd

Kubespray:
  image: crosscloudci/debian-docker:latest
  stage: Dependencies
  script:
    # Fetch Patches
    - wget https://raw.githubusercontent.com/crosscloudci/k8s-infra/master/calico-node.yml.j2.patch
    - wget https://raw.githubusercontent.com/crosscloudci/k8s-infra/master/coredns-deployment.yml.j2.patch
    - wget https://raw.githubusercontent.com/crosscloudci/k8s-infra/master/kubeadm-images.yaml.j2.patch
    - wget https://raw.githubusercontent.com/crosscloudci/k8s-infra/master/kubeadm-config.v1beta1.yaml.j2.patch
    - wget https://raw.githubusercontent.com/crosscloudci/k8s-infra/master/kubeadm-config.v1beta2.yaml.j2.patch
    # Apply Patches
    - patch roles/network_plugin/calico/templates/calico-node.yml.j2 calico-node.yml.j2.patch
    - patch roles/kubernetes-apps/ansible/templates/coredns-deployment.yml.j2 coredns-deployment.yml.j2.patch
    - patch roles/download/templates/kubeadm-images.yaml.j2 kubeadm-images.yaml.j2.patch
    - patch roles/kubernetes/master/templates/kubeadm-config.v1beta1.yaml.j2 kubeadm-config.v1beta1.yaml.j2.patch
    - patch roles/kubernetes/master/templates/kubeadm-config.v1beta2.yaml.j2 kubeadm-config.v1beta2.yaml.j2.patch
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" . 
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

Kubernetes:
  image: buildpack-deps:stretch
  stage: Dependencies
  script:
    - apt update && apt -y install jq
    - PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/14/pipelines/${K8S_PIPELINE_ID}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id') 
    - curl -s -o kubespray.env -L "${BASE_URL}/kubernetes/kubernetes/-/jobs/${PROJECT_JOB}/artifacts/raw/kubespray.env"
    - cat kubespray.env

  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - kubespray.env

Infra:
  image: buildpack-deps:stretch
  stage: Dependencies
  script:
    - apt update && apt -y install jq
    - PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/63/pipelines/${INFRA_PIPELINE_ID}/jobs?scope=success" | jq '.[] | select(.name=="Release") | .id') 
    - curl -s -o nodes.env -L "${BASE_URL}/cncf/infra-provisioning/-/jobs/${PROJECT_JOB}/artifacts/raw/terraform/nodes.env"
    - cat nodes.env

  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - nodes.env

K8s-Bootstrap:
  image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  stage: Bootstrap
  dependencies:
    - Kubernetes
    - Infra
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "False"
  script:
    - echo "$SSH_KEY" > .id_rsa && chmod 400 .id_rsa
    - eval $(ssh-agent) && ssh-add .id_rsa
    - source nodes.env
    - mv kubespray.env /kubespray
    - cd /kubespray
    - cp -rfp inventory/sample inventory/mycluster
    - CONFIG_FILE=inventory/mycluster/hosts.yml python3 contrib/inventory_builder/inventory.py "${MASTERS[@]}" "${WORKERS[@]}"
    - ansible-playbook -i inventory/mycluster/hosts.yml -e kubeconfig_localhost=true -e kubectl_localhost=true -e @kubespray.env --become --become-user=root cluster.yml
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - inventory/mycluster/artifacts/admin.conf


