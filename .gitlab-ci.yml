stages:
  - Artifacts
  - Cross-Cloud
  - End-To-End
  - Update-Dashboard

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export KUBECONFIG=$(pwd)/data/packet/kubeconfig
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - >
    if [ "$CI_JOB_NAME" == "Build-Source" ]; then
      source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
    elif [ "$CI_JOB_NAME" == "Dashboard" ]; then
      source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
    else
     echo 'Use container Ruby' 
    fi

.build_source: &build_source
  image: crosscloudci/debian-docker:latest
  stage: Artifacts
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build -f Dockerfile.deps -t crosscloudci/k8s-infra-deps:latest .
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

# Deploy Template used for Each Cloud
.kubernetes_deploy_template: &kubernetes_deploy_template
  image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  stage: Cross-Cloud
  script:
    - >
      if [ $PIPELINE_RELEASE_TYPE == "stable" ] && [ $ARCH == "amd64" ]; then
         export INFRA_PIPELINE="$STABLE_AMD64_JOB"
      elif [ $PIPELINE_RELEASE_TYPE == "stable" ] && [ $ARCH == "arm64" ]; then
         export INFRA_PIPELINE="$STABLE_ARM64_JOB"
      elif [ $PIPELINE_RELEASE_TYPE == "head" ] && [ $ARCH == "amd64" ]; then
         export INFRA_PIPELINE="$HEAD_AMD64_JOB"
      else
         export INFRA_PIPELINE="$HEAD_ARM64_JOB"
      fi
    - mkdir ./data
    - mkdir ~/.docker && echo "$DOCKER_AUTH" > ~/.docker/config.json
    - echo "$SSH_KEY" > .id_rsa && chmod 400 .id_rsa
    - eval $(ssh-agent) && ssh-add .id_rsa
    - cd /k8s-infra
    - echo /k8s-infra/bin/k8sinfra generate_config --release-type="$PIPELINE_RELEASE_TYPE" --infra-job="$INFRA_PIPELINE" -o ./data/cluster.yml
    - /k8s-infra/bin/k8sinfra generate_config --release-type="$PIPELINE_RELEASE_TYPE" --infra-job="$INFRA_PIPELINE" -o ./data/cluster.yml
    - echo /k8s-infra/bin/k8sinfra provision --config-file './data/cluster.yml'
    - /k8s-infra/bin/k8sinfra provision --config-file './data/cluster.yml'
    - sleep 1000000
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

# Per Cloud Destroy Template only run when DESTROY_VAR is Set
.kubernetes_cloud_destroy_template: &kubernetes_cloud_destroy_template
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: Cross-Cloud
  when: manual
  script:
    - echo "$SSH_KEY" > .id_rsa && chmod 400 .id_rsa
    - eval $(ssh-agent) && ssh-add .id_rsa
    - ansible-playbook -i ./data/hosts.yml -e "reset_confirmation='yes'" --become --become-user=root reset.yml


# Build-Source VARs
Build-Source:
  <<: *build_source

# Cloud Deploy VARs
Provisioning:
  <<: *kubernetes_deploy_template

# AWS Destroy VARs
Kubernetes_destroy:
  <<: *kubernetes_cloud_destroy_template

Dashboard:
  image: crosscloudci/debian-docker
  stage: Update-Dashboard
  script:
    - echo 'true'
