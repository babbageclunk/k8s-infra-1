#!/usr/bin/env ruby

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'byebug'
require 'logger'
require 'thor'
require 'yaml'
require 'faraday'
require 'erb'
require 'fileutils'
require_relative './kubespray-integration'
require_relative './k8sutils'

#require 'crosscloudci/ciservice/onap/build_pipeline'
#require 'crosscloudci/ciservice/build_pipeline'


class K8sInfra < Thor
  class_option :verbose, :type => :boolean, :aliases => "-v"
  class_option :debug, :type => :boolean, :aliases => "-d"
  class_option :quiet, :type => :boolean, :aliases => "-q"

  attr_accessor :logger, :config_location, :pipeline, :hosts

  DATA_DIR = "data/mycluster" 

  def initialize(*args)
    @logger = Logger.new(STDOUT)
    r = super *args
		if options[:debug]
			@logger.level = Logger::DEBUG
			@logger.info("Logger level set to DEBUG")
		elsif options[:verbose]
			@logger.level = Logger::INFO
			@logger.info("Logger level set to INFO")
		elsif options[:quiet]
			@logger.level = Logger::ERROR
			@logger.info("Logger level set to ERROR")
		else
			@logger.level = Logger::WARN
			@logger.info("Logger level defaulting to WARN")
		end

		r
  end

  desc "provision <[--dry-run] or [--config-file=<your/configfile/with/path>] or [--summary]", "k8s-infra provisioning CLI Tool"
  long_desc <<-LONGDESC
     Provisions generates provisioning tool (e.g. kubespray) configuration based on configuration output from terraform.

    --provision-type bootstrap kubernetes at the lowest level or insert a layer of virtualization

    --dry-run parse configuration and print what it would have used for provisioning 

    --summary Shows a summary of what is sent to the provisioning tool 

    --config-path path to configuration file 

  LONGDESC
  option "dry-run", :type => :boolean, :aliases => "-r"
  option "summary", :type => :boolean, :aliases => "-s"
  option "config-file", :type => :string
  def provision
    @logger.info "Generating provision config for K8s config-file: #{options['config-file']}"
 ## load file

    unless options['config-file']
      @logger.debug "config-file '#{options['config-file']}"
      @logger.debug "dry-run '#{options['dry-run']}"
      @logger.debug "summary '#{options['summary']}"

      puts "No config-file specified -- See help provision command"
      exit 1
    end
    @cluster_hash = load_cluster_file(options['config-file'])
    @logger.debug "cluster_hash '#{@cluster_hash}"
		if @cluster_hash['k8s_infra'].nil? || @cluster_hash['k8s_infra']['k8s_release'].nil? ||
		   @cluster_hash['k8s_infra']['arch'].nil? || 
		   @cluster_hash['k8s_infra']['provision_type'].nil? || 
			 @cluster_hash['k8s_infra']['nodes'].nil? then 
			puts "Cluster file has structure errors " 
			exit 1 
    end
    if !@cluster_hash['k8s_infra']['nodes'].find { |n| n['role'] == "worker" } then
      errmsg = <<-HEREDOC
      Cluster config should have a worker node :( 
      HEREDOC
      puts errmsg
      exit 1
    end
    if !@cluster_hash['k8s_infra']['nodes'].find { |n| n['role'] == "master" } then
      errmsg = <<-HEREDOC
      Cluster config should have a master node :( 
      HEREDOC
      puts errmsg
      exit 1
    end
    if @cluster_hash['k8s_infra']['provision_type'] != 'virtual' && @cluster_hash['k8s_infra']['provision_type'] != 'direct' then
      errmsg = <<-HEREDOC
      Provision type "local" is not supported. :( 
      Supported provisioning types: direct
      See k8s-infra help provision for more details.)
      HEREDOC
      puts errmsg
      exit 1
    end
    if @cluster_hash['k8s_infra']["provision_type"]=="direct" then
      ks = Kubespray.new(@cluster_hash)
      @cluster_hash = ks.set_urls(@cluster_hash)
      # Only publish images for HEAD when we are using amd64. This is required because arm64 doesn't get published
      # on every commit so we use a nightly build instead, which means we don't need to publish for arm64.
      # unless options['dry-run']
      #   if @cluster_hash['k8s_infra']['release_type'] == 'head' && @cluster_hash['k8s_infra']['arch'] == 'amd64' then
      #     K8sUtils.k8s_publish(@cluster_hash['k8s_infra']['k8s_release'], 'linux/amd64', @cluster_hash['k8s_infra']['registry'])
      #   end
      # end
      kubespray = Kubespray.new(@cluster_hash)
      if options['summary'] then
        config = ERB.new(generic_dry_run_template(), nil, '-')
        puts config.result(binding)
        puts "Successfully completed summary."
      end
      # kubeadm version is always stable
      kubespray_config = ERB.new(kubespray.provision_template(), nil, '-')
      if options['dry-run'] then
        inventory_file = "/tmp/hosts.yml"
        kubeconfig_path = "/tmp/admin.conf"
      else
        mkdpwd = FileUtils.pwd() 
        if ENV["RUBY_ENV"]=="test" then
          puts "env: #{ENV['RUBY_ENV']}"
          # if FileUtils.pwd() =~ /aruba/ then
          mkdans = FileUtils.mkdir_p "../../#{DATA_DIR}"
          inventory_file = "../../#{DATA_DIR}/hosts.yml"
          kubeconfig_path = "../../#{DATA_DIR}/artifacts/admin.conf"
        else
          puts "env: #{ENV['RUBY_ENV']}"
          FileUtils.mkdir_p DATA_DIR
          inventory_file = "#{DATA_DIR}/hosts.yml"
          kubeconfig_path = "#{DATA_DIR}/artifacts/admin.conf"
        end
      end
      full_path = File.expand_path inventory_file 
      full_kubeconfig_path = File.expand_path kubeconfig_path 

      puts "Kubespray inventory file: #{full_path}"
      File.open(inventory_file, 'w') do |f| 
        f.write kubespray_config.result(binding)
      end
      ks = Kubespray.new(@cluster_hash)
      if options['dry-run'] then
        puts "Dry-run successfully completed"
      else
        cluster = ks.start_kubespray 
        if cluster[:exit_code] == 0 then
          puts "KUBECONFIG path: #{full_kubeconfig_path}"
        else
          puts "cluster allocation failed"
        end
      end
    else
      @logger.debug "provision_type = not direct"
      config = ERB.new(generic_dry_run_template(), nil, '-')
      puts config.result(binding)
    end
  end

  desc "generate_config <[--hosts-file=HOSTS_FILE] or [--worker-h osts=<IP1,...,IPN>] [--master-hosts=<IP1,...,IPN>]> --arch=<K8s machine architecture> --provision-type=<direct|virtual> --release-type=<stable|head> [--output=OUTPUT_FILE]", "Generate cluster configuration using provided options"
  long_desc <<-LONGDESC
    Generates the configuration file for the K8s provisioning command.

    --output specifies a file to save the config file ot otherwise it's printed to standard output

    --hosts-file specifies the file to read the master and worker host ips from

    --worker-hosts specifies a comma separated list of IPS for K8s worker nodes

    --master-hosts specifies a comma separated list of IPS for K8s master nodes

    --infra-job specifies the id of a job to read to master and worker host ips from

    --release-type specifies using a K8s "stable" or "head" release (latest of each is dynamically determined)

    --arch specifies a supported K8s machine architecture to use (eg. arm64, amd64).

    --provision-type specifies install K8s directly on a host with "direct" or running the nodes in containers (eg. kind) on a single host with "virtual"
  LONGDESC
  option "output", :type => :string, :aliases => "-o"
  option "infra-job", :type => :string
  option "hosts-file", :type => :string
  option "worker-hosts", :type => :string
  option "master-hosts", :type => :string
  option "arch", :type => :string, :default => "amd64"
  option "release-type", :type => :string, :default => "stable"
  option "provision-type", :type => :string, :default => "direct"
  def generate_config
    @logger.info "Generating config for K8s #{options['release-type']} #{options['arch']} with #{options['provision-type']} host nodes"

    unless (options['hosts-file'] || (options['worker-hosts'] && options['master-hosts']) || options['infra-job'])
      @logger.debug "hosts file '#{options['hosts-file']}'"
      @logger.debug "worker hosts '#{options['worker-hosts']}'"
      @logger.debug "master hosts '#{options['master-hosts']}'"
      @logger.debug "infra job '#{options['infra-job']}'"

      puts "No node ips, hosts file, or job specified -- See help generate_config command"
      exit 1
      #invoke :help, ["generate_config"]
    end


    # hosts in file
    # TODO: Check that file is available otherwise show an error message and exit.

    if options['hosts-file']
      @hosts = load_hosts_file(options['hosts-file'])
      # TODO: Parse hosts file if hosts-file option is given
    elsif options['infra-job']
      @hosts = get_hosts(options['infra-job'])
      @logger.debug "Infra-job: #{options['infra-job']}"
      @logger.debug  "hosts: #{@hosts}"
    elsif (options['worker-hosts'] && options['master-hosts'])
      worker_arr = options['worker-hosts'].split(",")
      worker_hashes = worker_arr.map{|x| {"addr" => x, "role" => "worker"}} 
      master_arr = options['master-hosts'].split(",")
      master_hashes = master_arr.map{|x| {"addr" => x, "role" => "master"}} 
      @hosts = {"nodes" => master_hashes + worker_hashes} 
      @logger.debug "Infra-job: #{options['infra-job']}"
      @logger.debug  "hosts: #{@hosts}"
    else
      puts "All required options not handled"
    end

    kubernetes_release = K8sUtils.kubernetes_release("#{options['release-type']}/#{options['arch']}")
    stable_k8s_release = K8sUtils.kubernetes_release('stable')
    config = ERB.new(cluster_config_template("#{options['arch']}", "#{options['provision-type']}", "#{kubernetes_release}", "#{stable_k8s_release}", "#{options['release-type']}"), nil, '-')
    if options['output'] then
      if File.exist?(options['output']) then
        puts "#{options['output']} already exists"
        exit 1
      else
        File.open("#{options['output']}", "w") do |f| 
          f.write config.result(binding)
        end
      end
      puts "Cluster configuration file generated."
    else
      puts config.result(binding)
    end
  end

  private

  # https://gitlab.cncf.ci/cncf/infra-provisioning/-/jobs/168472/artifacts/raw/terraform/nodes.env
  def get_hosts (job)
    base_url = "https://gitlab.cncf.ci"
    hosts_url = "#{base_url}/cncf/infra-provisioning/-/jobs/#{job}/artifacts/raw/terraform/nodes.env"
    response = Faraday.get hosts_url
    if response && response.body.nil? then
      @logger.error "Failed to download hosts from job #{options['infra-job']}"
    else
      YAML.load(response.body)
    end
  end

  def cluster_verify_template
    %{
<% @cluster_hash['k8s_infra']['k8s_release']  rescue puts "Cluster file has structure errors "; exit 1  -%>
<% @cluster_hash['k8s_infra']['arch']   rescue puts "Cluster file has structure errors "  ; exit 1 -%>
<% @cluster_hash['k8s_infra']['nodes']   rescue puts "Cluster file has structure errors " ; exit 1 -%>
<% @cluster_hash['k8s_infra']['provision_type']   rescue puts "Cluster file has structure errors " ; exit 1 -%>
    }
  end

  def generic_dry_run_template
    %{
all:
     Kubernetes: <%= @cluster_hash['k8s_infra']['k8s_release'] %>
     Architecture: <%= @cluster_hash["k8s_infra"]["arch"] %>
     Provision_type:: <%= @cluster_hash["k8s_infra"]["provision_type"] %>
     Masters: <%= @cluster_hash["k8s_infra"]["nodes"].find_all{|x| x["role"] == "master"}.count %>
     Workers: <%= @cluster_hash["k8s_infra"]["nodes"].find_all{|x| x["role"] == "master"}.count %>
     hyperkube_download_url: <%= @cluster_hash['k8s_infra']['hyperkube_download_url'] %> 
     hyperkube_binary_checksum: <%= @cluster_hash['k8s_infra']['hyperkube_binary_checksum'] %>
     kubeadm_download_url: <%= @cluster_hash['k8s_infra']['kubeadm_download_url'] %>
     kubeadm_binary_checksum: <%= @cluster_hash['k8s_infra']['kubeadm_binary_checksum'] %>
  Nodes:
    <% @cluster_hash['k8s_infra']['nodes'].each_with_index do |x, index|  -%>
  ip: <%= x['addr'] %>
      role: <%= x['role'] %>
    <% end -%>
    }
  end

  def cluster_config_template (arch,type,kubernetes_release, stable_k8s_release, release_type)
    %{
k8s_infra:
  arch: <%= "#{arch}" %>
  provision_type: <%= "#{type}" %>
  release_type: <%= "#{release_type}" %>
  k8s_release: <%= "#{kubernetes_release}" -%>
  stable_k8s_release: <%= "#{stable_k8s_release}" -%>
  registry: crosscloudci
  nodes:
    <%for x in @hosts['nodes'] -%>- addr: <%= x['addr'] %>
      role: <%= x['role'] %>
    <%end rescue puts "Hosts file has structure errors " %>
    }
  end

  def load_hosts_file(hostsfile)
    unless File.exists?(hostsfile)
      puts "Hosts file not found '#{hostsfile}'"
      exit 1
    end

    begin
      YAML.load_file(hostsfile)
    rescue Psych::SyntaxError => e
      #@logger.error "Hosts file #{options['hosts-file']} has syntax errors"
      puts "Hosts file #{hostsfile} has syntax errors"
      puts e
      exit 1
    end
  end
  def load_cluster_file(clusterfile)
    unless File.exists?(clusterfile)
      puts "Cluster file not found '#{clusterfile}'"
      exit 1
    end

    begin
      YAML.load_file(clusterfile)
    rescue Psych::SyntaxError => e
      #@logger.error "Hosts file #{options['hosts-file']} has syntax errors"
      puts "Cluster file #{clusterfile} has syntax errors"
      puts e
      exit 1
    end
  end
end

K8sInfra.start(ARGV)

exit 0
